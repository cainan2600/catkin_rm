// Generated by gencpp from file rm_msgs/write_single_register.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_WRITE_SINGLE_REGISTER_H
#define RM_MSGS_MESSAGE_WRITE_SINGLE_REGISTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct write_single_register_
{
  typedef write_single_register_<ContainerAllocator> Type;

  write_single_register_()
    : port(0)
    , address(0)
    , data(0)
    , device(0)  {
    }
  write_single_register_(const ContainerAllocator& _alloc)
    : port(0)
    , address(0)
    , data(0)
    , device(0)  {
  (void)_alloc;
    }



   typedef int8_t _port_type;
  _port_type port;

   typedef int32_t _address_type;
  _address_type address;

   typedef int16_t _data_type;
  _data_type data;

   typedef int16_t _device_type;
  _device_type device;





  typedef boost::shared_ptr< ::rm_msgs::write_single_register_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::write_single_register_<ContainerAllocator> const> ConstPtr;

}; // struct write_single_register_

typedef ::rm_msgs::write_single_register_<std::allocator<void> > write_single_register;

typedef boost::shared_ptr< ::rm_msgs::write_single_register > write_single_registerPtr;
typedef boost::shared_ptr< ::rm_msgs::write_single_register const> write_single_registerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::write_single_register_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::write_single_register_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::write_single_register_<ContainerAllocator1> & lhs, const ::rm_msgs::write_single_register_<ContainerAllocator2> & rhs)
{
  return lhs.port == rhs.port &&
    lhs.address == rhs.address &&
    lhs.data == rhs.data &&
    lhs.device == rhs.device;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::write_single_register_<ContainerAllocator1> & lhs, const ::rm_msgs::write_single_register_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::write_single_register_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::write_single_register_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::write_single_register_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::write_single_register_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::write_single_register_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::write_single_register_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::write_single_register_<ContainerAllocator> >
{
  static const char* value()
  {
    return "967b76240e09e64a48f1fbaa080ed555";
  }

  static const char* value(const ::rm_msgs::write_single_register_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x967b76240e09e64aULL;
  static const uint64_t static_value2 = 0x48f1fbaa080ed555ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::write_single_register_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/write_single_register";
  }

  static const char* value(const ::rm_msgs::write_single_register_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::write_single_register_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 port\n"
"int32 address\n"
"int16 data\n"
"int16 device\n"
;
  }

  static const char* value(const ::rm_msgs::write_single_register_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::write_single_register_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port);
      stream.next(m.address);
      stream.next(m.data);
      stream.next(m.device);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct write_single_register_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::write_single_register_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::write_single_register_<ContainerAllocator>& v)
  {
    s << indent << "port: ";
    Printer<int8_t>::stream(s, indent + "  ", v.port);
    s << indent << "address: ";
    Printer<int32_t>::stream(s, indent + "  ", v.address);
    s << indent << "data: ";
    Printer<int16_t>::stream(s, indent + "  ", v.data);
    s << indent << "device: ";
    Printer<int16_t>::stream(s, indent + "  ", v.device);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_WRITE_SINGLE_REGISTER_H
