// Generated by gencpp from file rm_msgs/Set_Realtime_Push.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_SET_REALTIME_PUSH_H
#define RM_MSGS_MESSAGE_SET_REALTIME_PUSH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Set_Realtime_Push_
{
  typedef Set_Realtime_Push_<ContainerAllocator> Type;

  Set_Realtime_Push_()
    : cycle(0)
    , port(0)
    , force_coordinate(0)
    , ip()  {
    }
  Set_Realtime_Push_(const ContainerAllocator& _alloc)
    : cycle(0)
    , port(0)
    , force_coordinate(0)
    , ip(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _cycle_type;
  _cycle_type cycle;

   typedef uint16_t _port_type;
  _port_type port;

   typedef uint16_t _force_coordinate_type;
  _force_coordinate_type force_coordinate;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ip_type;
  _ip_type ip;





  typedef boost::shared_ptr< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> const> ConstPtr;

}; // struct Set_Realtime_Push_

typedef ::rm_msgs::Set_Realtime_Push_<std::allocator<void> > Set_Realtime_Push;

typedef boost::shared_ptr< ::rm_msgs::Set_Realtime_Push > Set_Realtime_PushPtr;
typedef boost::shared_ptr< ::rm_msgs::Set_Realtime_Push const> Set_Realtime_PushConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator1> & lhs, const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator2> & rhs)
{
  return lhs.cycle == rhs.cycle &&
    lhs.port == rhs.port &&
    lhs.force_coordinate == rhs.force_coordinate &&
    lhs.ip == rhs.ip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator1> & lhs, const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a0e0df44121dc8d27005a2fbd40ac91";
  }

  static const char* value(const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a0e0df44121dc8dULL;
  static const uint64_t static_value2 = 0x27005a2fbd40ac91ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Set_Realtime_Push";
  }

  static const char* value(const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 cycle\n"
"uint16 port\n"
"uint16 force_coordinate\n"
"string ip\n"
;
  }

  static const char* value(const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cycle);
      stream.next(m.port);
      stream.next(m.force_coordinate);
      stream.next(m.ip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Set_Realtime_Push_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Set_Realtime_Push_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Set_Realtime_Push_<ContainerAllocator>& v)
  {
    s << indent << "cycle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cycle);
    s << indent << "port: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.port);
    s << indent << "force_coordinate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.force_coordinate);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_SET_REALTIME_PUSH_H
