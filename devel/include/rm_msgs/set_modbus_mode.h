// Generated by gencpp from file rm_msgs/set_modbus_mode.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_SET_MODBUS_MODE_H
#define RM_MSGS_MESSAGE_SET_MODBUS_MODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct set_modbus_mode_
{
  typedef set_modbus_mode_<ContainerAllocator> Type;

  set_modbus_mode_()
    : port(0)
    , baudrate(0)
    , timeout(0)  {
    }
  set_modbus_mode_(const ContainerAllocator& _alloc)
    : port(0)
    , baudrate(0)
    , timeout(0)  {
  (void)_alloc;
    }



   typedef int8_t _port_type;
  _port_type port;

   typedef int32_t _baudrate_type;
  _baudrate_type baudrate;

   typedef int16_t _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::rm_msgs::set_modbus_mode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::set_modbus_mode_<ContainerAllocator> const> ConstPtr;

}; // struct set_modbus_mode_

typedef ::rm_msgs::set_modbus_mode_<std::allocator<void> > set_modbus_mode;

typedef boost::shared_ptr< ::rm_msgs::set_modbus_mode > set_modbus_modePtr;
typedef boost::shared_ptr< ::rm_msgs::set_modbus_mode const> set_modbus_modeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::set_modbus_mode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::set_modbus_mode_<ContainerAllocator1> & lhs, const ::rm_msgs::set_modbus_mode_<ContainerAllocator2> & rhs)
{
  return lhs.port == rhs.port &&
    lhs.baudrate == rhs.baudrate &&
    lhs.timeout == rhs.timeout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::set_modbus_mode_<ContainerAllocator1> & lhs, const ::rm_msgs::set_modbus_mode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::set_modbus_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::set_modbus_mode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::set_modbus_mode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6163070760cb79680dfbd36751deebbe";
  }

  static const char* value(const ::rm_msgs::set_modbus_mode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6163070760cb7968ULL;
  static const uint64_t static_value2 = 0x0dfbd36751deebbeULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/set_modbus_mode";
  }

  static const char* value(const ::rm_msgs::set_modbus_mode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 port\n"
"int32 baudrate\n"
"int16 timeout\n"
;
  }

  static const char* value(const ::rm_msgs::set_modbus_mode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.port);
      stream.next(m.baudrate);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_modbus_mode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::set_modbus_mode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::set_modbus_mode_<ContainerAllocator>& v)
  {
    s << indent << "port: ";
    Printer<int8_t>::stream(s, indent + "  ", v.port);
    s << indent << "baudrate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.baudrate);
    s << indent << "timeout: ";
    Printer<int16_t>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_SET_MODBUS_MODE_H
