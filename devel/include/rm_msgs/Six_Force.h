// Generated by gencpp from file rm_msgs/Six_Force.msg
// DO NOT EDIT!


#ifndef RM_MSGS_MESSAGE_SIX_FORCE_H
#define RM_MSGS_MESSAGE_SIX_FORCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rm_msgs
{
template <class ContainerAllocator>
struct Six_Force_
{
  typedef Six_Force_<ContainerAllocator> Type;

  Six_Force_()
    : force_Fx(0.0)
    , force_Fy(0.0)
    , force_Fz(0.0)
    , force_Mx(0.0)
    , force_My(0.0)
    , force_Mz(0.0)  {
    }
  Six_Force_(const ContainerAllocator& _alloc)
    : force_Fx(0.0)
    , force_Fy(0.0)
    , force_Fz(0.0)
    , force_Mx(0.0)
    , force_My(0.0)
    , force_Mz(0.0)  {
  (void)_alloc;
    }



   typedef float _force_Fx_type;
  _force_Fx_type force_Fx;

   typedef float _force_Fy_type;
  _force_Fy_type force_Fy;

   typedef float _force_Fz_type;
  _force_Fz_type force_Fz;

   typedef float _force_Mx_type;
  _force_Mx_type force_Mx;

   typedef float _force_My_type;
  _force_My_type force_My;

   typedef float _force_Mz_type;
  _force_Mz_type force_Mz;





  typedef boost::shared_ptr< ::rm_msgs::Six_Force_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rm_msgs::Six_Force_<ContainerAllocator> const> ConstPtr;

}; // struct Six_Force_

typedef ::rm_msgs::Six_Force_<std::allocator<void> > Six_Force;

typedef boost::shared_ptr< ::rm_msgs::Six_Force > Six_ForcePtr;
typedef boost::shared_ptr< ::rm_msgs::Six_Force const> Six_ForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rm_msgs::Six_Force_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rm_msgs::Six_Force_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rm_msgs::Six_Force_<ContainerAllocator1> & lhs, const ::rm_msgs::Six_Force_<ContainerAllocator2> & rhs)
{
  return lhs.force_Fx == rhs.force_Fx &&
    lhs.force_Fy == rhs.force_Fy &&
    lhs.force_Fz == rhs.force_Fz &&
    lhs.force_Mx == rhs.force_Mx &&
    lhs.force_My == rhs.force_My &&
    lhs.force_Mz == rhs.force_Mz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rm_msgs::Six_Force_<ContainerAllocator1> & lhs, const ::rm_msgs::Six_Force_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rm_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Six_Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rm_msgs::Six_Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Six_Force_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rm_msgs::Six_Force_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Six_Force_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rm_msgs::Six_Force_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rm_msgs::Six_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abfa542f676ea571474ea027ddb54a05";
  }

  static const char* value(const ::rm_msgs::Six_Force_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabfa542f676ea571ULL;
  static const uint64_t static_value2 = 0x474ea027ddb54a05ULL;
};

template<class ContainerAllocator>
struct DataType< ::rm_msgs::Six_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rm_msgs/Six_Force";
  }

  static const char* value(const ::rm_msgs::Six_Force_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rm_msgs::Six_Force_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 force_Fx\n"
"float32 force_Fy\n"
"float32 force_Fz\n"
"float32 force_Mx\n"
"float32 force_My\n"
"float32 force_Mz\n"
;
  }

  static const char* value(const ::rm_msgs::Six_Force_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rm_msgs::Six_Force_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force_Fx);
      stream.next(m.force_Fy);
      stream.next(m.force_Fz);
      stream.next(m.force_Mx);
      stream.next(m.force_My);
      stream.next(m.force_Mz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Six_Force_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rm_msgs::Six_Force_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rm_msgs::Six_Force_<ContainerAllocator>& v)
  {
    s << indent << "force_Fx: ";
    Printer<float>::stream(s, indent + "  ", v.force_Fx);
    s << indent << "force_Fy: ";
    Printer<float>::stream(s, indent + "  ", v.force_Fy);
    s << indent << "force_Fz: ";
    Printer<float>::stream(s, indent + "  ", v.force_Fz);
    s << indent << "force_Mx: ";
    Printer<float>::stream(s, indent + "  ", v.force_Mx);
    s << indent << "force_My: ";
    Printer<float>::stream(s, indent + "  ", v.force_My);
    s << indent << "force_Mz: ";
    Printer<float>::stream(s, indent + "  ", v.force_Mz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RM_MSGS_MESSAGE_SIX_FORCE_H
